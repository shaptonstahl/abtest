out <- cbind(out, X)
if(degree >= 2) {
for(t1 in 1:ncol(X)) {
for(t2 in 1:ncol(X)) {
out <- cbind(out, X[,t1] * X[,t2])
}
}
}
if(degree >= 3) {
for(t1 in 1:ncol(X)) {
for(t2 in 1:ncol(X)) {
for(t3 in 1:ncol(X)) {
out <- cbind(out, X[,t1] * X[,t2] * X[,t3])
}
}
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3)), degree=2)
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
?expand.grid
X <- matrix(c(2,2,3,3,5,5), nrow=2)
X
d <- 2
factor.array <- expand.grid(lapply(1:d, 1:ncol(X)))
?replicate
replicate(2, 1:3)
replicate(2, 1:3, simplify=FALSE)
factor.array <- expand.grid(replicate(d, 1:ncol(X), simplify=FALSE))
factor.array
?prod
prod(X[,1:2])
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
factor.array <- expand.grid(replicate(d, 1:ncol(X), simplify=FALSE))
for(i in 1:nrow(factor.array)) {
out <- cbind(out, apply(X[,factor.array[i,]], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
i <- 1
factor.array[i,]
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array[i,]
X[,factor.array[i,]]
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
for(i in 1:nrow(factor.array)) {
out <- cbind(out, apply(X[,factor.array[i,]], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
apply(X[,factor.array[i,]], 1, prod)
factor.array
d <- 1
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array
dim(factor.array)
cat("Generating terms with degree", d, "\n")
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
for(i in 1:nrow(factor.array)) {
out <- cbind(out, apply(X[,factor.array[i,]], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
d
X
X <- matrix(c(2,2,3,3), nrow=2)
X
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array
out <- rep(1, nrow(X))
out
i
out <- cbind(out, apply(X[,factor.array[i,]], 1, prod))
X[,factor.array[i,]]
?"["
out <- cbind(out, apply(X[,factor.array[i,], drop=FALSE], 1, prod))
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
for(i in 1:nrow(factor.array)) {
out <- cbind(out, apply(X[,factor.array[i,], drop=FALSE], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
lapply(0:4, function(i) choose(i, 0:i))
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array <- factor.array[order(factor.array),]
factor.array
d <- 3
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array <- factor.array[order(factor.array),]
?order
lapply(1:d, function(i) factor.array[,i])
factor.array <- factor.array[order(lapply(1:d, function(i) factor.array[,i]),]
order(lapply(1:d, function(i) factor.array[,i])
order(lapply(1:d, function(i) factor.array[,i]))
order(as.data.frame(factor.array))
factor.array <- factor.array[order(as.data.frame(factor.array)),]
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
as.data.frame(factor.array)
order(as.data.frame(factor.array))
factor.array <- factor.array[do.call(order, as.data.frame(factor.array)),]
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
do.call(order, as.data.frame(factor.array))
factor.array <- factor.array[do.call(order, as.data.frame(factor.array)),]
factor.array
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- apply(factor.array, 1, sort)
sorted.factor.array
sorted.factor.array <- t(apply(factor.array, 1, sort))
sorted.factor.array
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
deduped.factor.array
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
X <- matrix(c(2,2,3,3), nrow=2)
X
d <- 3
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array
sorted.factor.array <- t(apply(factor.array, 1, sort))
sorted.factor.array
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
deduped.factor.array
i <- 1
apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod)
i <- 2
apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod)
i <- 3
apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod)
i <- 4
apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod)
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
deduped.factor.array
d <- 1
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),]
deduped.factor.array
out <- rep(1, nrow(X))
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod)
deduped.factor.array[i,]
deduped.factor.array
sorted.factor.array
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),, drop=FALSE]
deduped.factor.array
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),, drop=FALSE]
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
d <- 1
X
out <- rep(1, nrow(X))
d <- 1
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
sorted.factor.array <- t(apply(factor.array, 1, sort))
deduped.factor.array <- sorted.factor.array[!duplicated(sorted.factor.array),, drop=FALSE]
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
out
factor.array
sorted.factor.array
apply(factor.array, 1, sort)
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
factor.array
for(i in 1:nrow(factor.array)) factor.array[i,] <- sort(factor.array[i,])
factor.array
MapFeatures <- function(X, degree=2) {
#' Given a numeric matrix or data.frame with at least
#' two columns returns the same with all interaction terms
#' up to degree `degree`, including a column of 1s in the
#' first column.
#'
#' The number of columns returned is huge:
#'
#' ncol(out) = 1 + 2^ncol(X) + 3^ncol(X) +...+ degree^ncol(X)
#'
#' so it's polynomial of degree ncol(X) in degree and
#' exponential in ncol(X).
if(is.data.frame(X)) {
X <- as.matrix(X)
was.data.frame <- TRUE
} else{
was.data.frame <- FALSE
}
stopifnot(is.numeric(X))
stopifnot(ncol(X) > 1)
stopifnot(degree >= 1)
out <- rep(1, nrow(X))
for(d in 1:degree) {
cat("Generating terms with degree", d, "\n")
factor.array <- as.matrix(expand.grid(replicate(d, 1:ncol(X), simplify=FALSE)))
for(i in 1:nrow(factor.array)) factor.array[i,] <- sort(factor.array[i,])
deduped.factor.array <- factor.array[!duplicated(factor.array),, drop=FALSE]
for(i in 1:nrow(deduped.factor.array)) {
out <- cbind(out, apply(X[,deduped.factor.array[i,], drop=FALSE], 1, prod))
}
}
return(out)
}
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2)
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=3)
MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=4)
MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=2)
MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=3)
MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=4)
ncol(MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=2))
ncol(MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=3))
ncol(MapFeatures(matrix(c(2,2,3,3), nrow=2), degree=4))
ncol(MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=2))
ncol(MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=3))
ncol(MapFeatures(matrix(c(2,2,3,3,5,5), nrow=2), degree=4))
source("http://www.haptonstahl.org/R/MapFeatures/MapFeatures.R")
source("http://www.haptonstahl.org/R/MapFeatures/MapFeatures.R")
source("http://www.haptonstahl.org/R/guid/guid.R")
source("http://www.haptonstahl.org/R/MapFeatures/MapFeatures.R")
source('~/github/MPX/WorkingQueries/sprint_report_functions.R')
install.packages("lubridate")
install.packages("XML")
source('~/Box Sync/work/R/npr_api_functions.R')
source('~/../Box Sync/work/R/npr_api_functions.R')
GetStoryURLs(10192781)
GetStoryURLs(189522647)
GetStoryURLs(356131704)
content.story.ids <- c(356131704, 10192781, 189522647)
al.urls <- sapply(content.story.ids, function(id) GetStoryURLs(id)$alt.page.url)
alt.urls <- sapply(content.story.ids, function(id) GetStoryURLs(id)$alt.page.url)
rm(al.urls)
alt.urls
goats.story.ids <- content.story.ids[grep("/goatsandsoda/", alt.urls)]
goats.story.ids
content.story.ids <- c(content.story.ids, 356062823)
alt.urls <- sapply(content.story.ids, function(id) GetStoryURLs(id)$alt.page.url)
alt.urls
goats.story.ids <- content.story.ids[grep("/blogs/goatsandsoda/", alt.urls)]
ed.story.ids <- content.story.ids[grep("/blogs/ed/", alt.urls)]
goats.story.ids
ed.story.ids
GetRatingRatesForStory <- function(story.id,
platforms=default.platforms,
driver=m,
group=default.group) {
con <- dbConnect(driver, group = group)
SQLstatement <- paste("SELECT ratings_rating, count(ratings_rating) FROM user_ratings ",
"WHERE ratings_story_id = '", story.id, "' AND ",
"ratings_user_id NOT IN (", paste(robo.ids, collapse=", "), ") AND ",
"ratings_platform IN ('", paste(platforms, collapse="', '"),"')",
sep="")
rs <- dbSendQuery(con, SQLstatement)
dbDisconnect(con)
ratings <- fetch(rs, n=-1)
if(0==ncol(user.ids)) return(NULL)
names(ratings) <- c("rating", "count")
ratings$share <- ratings$count / sum(ratings$count)
return(ratings)
}
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
e <- simpleError("test error")
tryCatch(stop(e), finally = print("Hello"))
res <- tryCatch(stop(e), finally = print("Hello"))
res
library(plyr)
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
all_rstan()
install.packages("Rcpp")
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
install.packages("inline")
library(inline)
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
install.packages(c("inline", "BH", "RcppEigen"))
install.packages(c("inline", "BH", "RcppEigen"))
library(rstan)
library(rstan)
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
library(rstan)
detach("package:rstan", unload=TRUE)
install.packages("GDELTtools")
library("GDELTtools", lib.loc="C:/R/R-3.1.1/library")
test.filter <- list(ActionGeo_ADM1Code=c("NI", "US"), ActionGeo_CountryCode="US")
test.results <- GetGDELT(start.date="1979-01-01", end.date="1979-12-31",
filter=test.filter)
pie(c(2,4,6))
x  <- c(1,3,5)
pie(x)
library(foreign)
(1.01^3 - .99^3)/.02
install.packages('devtools')
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
devtools::install_github('rstudio/shinyapps')
library("shinyapps", lib.loc="~/R/win-library/3.1")
shinyapps::setAccountInfo(name='polimath', token='DBBEA99ECBA8E147D45C9AE27C59D6A0', secret='K5Mv1rkXzgsxCFxRFO+oS4y0sfIgcPYYl6o7cjAm')
install.packages("shiny")
setwd("~/GitHub/abtest/ab-boot-demo")
runApp()
library("shiny", lib.loc="~/R/win-library/3.1")
runApp()
